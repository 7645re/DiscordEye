// <auto-generated />
using System;
using DiscordEye.EventsAggregator.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiscordEye.EventsAggregator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.ChannelEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildEntityId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GuildEntityId");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.GuildEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Guild");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.MessageEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelEntityId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("GuildEntityId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("UserEntityId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelEntityId");

                    b.HasIndex("GuildEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.MessageHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageHistory");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.UserEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.UserGuildEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGuild");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.ChannelEntity", b =>
                {
                    b.HasOne("DiscordEye.EventsAggregator.Entities.GuildEntity", "GuildEntity")
                        .WithMany("Channels")
                        .HasForeignKey("GuildEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildEntity");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.MessageEntity", b =>
                {
                    b.HasOne("DiscordEye.EventsAggregator.Entities.ChannelEntity", "ChannelEntity")
                        .WithMany()
                        .HasForeignKey("ChannelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordEye.EventsAggregator.Entities.GuildEntity", "GuildEntity")
                        .WithMany()
                        .HasForeignKey("GuildEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordEye.EventsAggregator.Entities.UserEntity", "UserEntity")
                        .WithMany("MessagesEntities")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelEntity");

                    b.Navigation("GuildEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.MessageHistoryEntity", b =>
                {
                    b.HasOne("DiscordEye.EventsAggregator.Entities.MessageEntity", "MessageEntity")
                        .WithMany("MessageHistoryEntities")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageEntity");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.UserGuildEntity", b =>
                {
                    b.HasOne("DiscordEye.EventsAggregator.Entities.GuildEntity", "Guild")
                        .WithMany("UserGuilds")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordEye.EventsAggregator.Entities.UserEntity", "User")
                        .WithMany("UserGuilds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.GuildEntity", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserGuilds");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.MessageEntity", b =>
                {
                    b.Navigation("MessageHistoryEntities");
                });

            modelBuilder.Entity("DiscordEye.EventsAggregator.Entities.UserEntity", b =>
                {
                    b.Navigation("MessagesEntities");

                    b.Navigation("UserGuilds");
                });
#pragma warning restore 612, 618
        }
    }
}
