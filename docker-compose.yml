version: '3.8'
networks:
  DiscordEye:
    driver: bridge

services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root-token"
      VAULT_ADDR: "http://0.0.0.0:8200"
    volumes:
      - ./vault/data:/vault/file
    cap_add:
      - IPC_LOCK
    command: server -dev -dev-root-token-id=root-token
    networks:
      - DiscordEye

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - DiscordEye
        
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_MS: 7000
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - DiscordEye
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NotWeakPassword123!
      POSTGRES_DB: DiscordEye
    ports:
      - "5432:5432"
    networks:
      - DiscordEye
  
  node1:
    build:
      context: .
      dockerfile: DiscordEye.Node/Dockerfile
    container_name: DiscordEye.Node1
    environment:
      - DISCORD_TOKEN=MTA1MTE2NTcwMDUxNDkxODQzMA.GGhNBl.XLrPFxXcABEkLbYKiWzmcV3WTpa545NOz6RLqA
      - ASPNETCORE_HTTP_PORTS=5001
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - DiscordEye
    ports:
      - "5001:5001"
  
  node2:
    build:
      context: .
      dockerfile: DiscordEye.Node/Dockerfile
    container_name: DiscordEye.Node2
    environment:
      - DISCORD_TOKEN=MTA1MTE2NTcwMDUxNDkxODQzMA.GGhNBl.XLrPFxXcABEkLbYKiWzmcV3WTpa545NOz6RLqA
      - ASPNETCORE_HTTP_PORTS=5002
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - DiscordEye
    ports:
      - "5002:5002"
  
  proxyDistributor:
    build:
      context: .
      dockerfile: DiscordEye.ProxyDistributor/Dockerfile
    container_name: DiscordEye.ProxyDistributor
    environment:
      - ASPNETCORE_HTTP_PORTS=5000
    networks:
      - DiscordEye
    ports:
      - "5000:5000"

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - DiscordEye

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - logstash_data:/usr/share/logstash/data
    networks:
      - DiscordEye
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - DiscordEye
    depends_on:
      - elasticsearch

volumes:
  vault_data:
  es_data:
  logstash_data:
  kibana_data: